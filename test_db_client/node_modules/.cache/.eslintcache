[{"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\index.js":"1","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\reportWebVitals.js":"2","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\App.js":"3","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\TermsCondition.js":"4","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\UsersPage.js":"5","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\MakananPage.js":"6","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\TestAllFunction.js":"7","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\MessagePage.js":"8","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\NewPageTest.js":"9","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\UploadPage.js":"10","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\InsertPage.js":"11","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\LandingPage.js":"12","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\WelcomePage.js":"13","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\NavBar.js":"14","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\CouponPage.js":"15","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\HistoryFood.js":"16","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\AnalyticGraph.js":"17","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\FoodApplication.js":"18","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\AdminDashboard.js":"19","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\authentication\\Login.js":"20","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\vendor\\VendorListPage.js":"21","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\PerantiNextPage.js":"22","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\BaucarFormPage.js":"23","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\KhairatNextPage.js":"24","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\AnalyticDashboard.js":"25","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\KhairatFormPage.js":"26","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\WangFormPage.js":"27","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\WangNextPage.js":"28","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\EvaluationPage.js":"29","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\PerantiFormPage.js":"30","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\ApplicationListPage.js":"31","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\functions\\DragDrop.js":"32","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\student\\ApplicationStatus.js":"33","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\student\\HistoryFoodApplication.js":"34","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\vendor\\CreateVendor.js":"35","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\authentication\\RegisterDialog.js":"36","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\vendor\\VendorList.js":"37","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\StepperComponent.js":"38","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\PerantiList.js":"39","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\MakananList.js":"40","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\KewanganList.js":"41","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\NewApplication.js":"42","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\PendingApplication.js":"43","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\KhairatKematianList.js":"44","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\student\\DescriptionDialog.js":"45","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\vendor\\InvoiceDialog.js":"46","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\StudentInfoStep.js":"47","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\ResultStep.js":"48","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\ApprovedDialog.js":"49","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\DocumentationStep.js":"50","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\RejectDialog.js":"51","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\Data.js":"52"},{"size":552,"mtime":1697464158360,"results":"53","hashOfConfig":"54"},{"size":375,"mtime":1697465113703,"results":"55","hashOfConfig":"54"},{"size":4770,"mtime":1698219447983,"results":"56","hashOfConfig":"54"},{"size":1997,"mtime":1697464158357,"results":"57","hashOfConfig":"54"},{"size":2453,"mtime":1698050504761,"results":"58","hashOfConfig":"54"},{"size":1872,"mtime":1697798800548,"results":"59","hashOfConfig":"54"},{"size":493,"mtime":1697479394214,"results":"60","hashOfConfig":"54"},{"size":409,"mtime":1697464158353,"results":"61","hashOfConfig":"54"},{"size":228,"mtime":1697477657834,"results":"62","hashOfConfig":"54"},{"size":2502,"mtime":1697798800550,"results":"63","hashOfConfig":"54"},{"size":2936,"mtime":1697464158350,"results":"64","hashOfConfig":"54"},{"size":4362,"mtime":1697479394210,"results":"65","hashOfConfig":"54"},{"size":5574,"mtime":1697798858680,"results":"66","hashOfConfig":"54"},{"size":3794,"mtime":1697799335543,"results":"67","hashOfConfig":"54"},{"size":7253,"mtime":1697480150010,"results":"68","hashOfConfig":"54"},{"size":597,"mtime":1697479394206,"results":"69","hashOfConfig":"54"},{"size":4212,"mtime":1698219447990,"results":"70","hashOfConfig":"54"},{"size":6735,"mtime":1698219447985,"results":"71","hashOfConfig":"54"},{"size":604,"mtime":1698219447986,"results":"72","hashOfConfig":"54"},{"size":4861,"mtime":1698219448002,"results":"73","hashOfConfig":"54"},{"size":688,"mtime":1697798800577,"results":"74","hashOfConfig":"54"},{"size":6606,"mtime":1698050504775,"results":"75","hashOfConfig":"54"},{"size":2005,"mtime":1698050504764,"results":"76","hashOfConfig":"54"},{"size":6453,"mtime":1698056304058,"results":"77","hashOfConfig":"54"},{"size":8799,"mtime":1698219447988,"results":"78","hashOfConfig":"54"},{"size":1942,"mtime":1698054143180,"results":"79","hashOfConfig":"54"},{"size":1960,"mtime":1698219448004,"results":"80","hashOfConfig":"54"},{"size":7091,"mtime":1698219448006,"results":"81","hashOfConfig":"54"},{"size":1406,"mtime":1697798800564,"results":"82","hashOfConfig":"54"},{"size":1931,"mtime":1698050504773,"results":"83","hashOfConfig":"54"},{"size":3923,"mtime":1697564704766,"results":"84","hashOfConfig":"54"},{"size":3380,"mtime":1698050504782,"results":"85","hashOfConfig":"54"},{"size":4061,"mtime":1697798800582,"results":"86","hashOfConfig":"54"},{"size":2481,"mtime":1697479394247,"results":"87","hashOfConfig":"54"},{"size":4571,"mtime":1697798800574,"results":"88","hashOfConfig":"54"},{"size":3966,"mtime":1698219448003,"results":"89","hashOfConfig":"54"},{"size":5555,"mtime":1698219448001,"results":"90","hashOfConfig":"54"},{"size":3021,"mtime":1697798800571,"results":"91","hashOfConfig":"54"},{"size":9755,"mtime":1698219447999,"results":"92","hashOfConfig":"54"},{"size":9755,"mtime":1698219447995,"results":"93","hashOfConfig":"54"},{"size":9752,"mtime":1698219447993,"results":"94","hashOfConfig":"54"},{"size":11657,"mtime":1698304860442,"results":"95","hashOfConfig":"54"},{"size":9661,"mtime":1698219447997,"results":"96","hashOfConfig":"54"},{"size":9755,"mtime":1698219447994,"results":"97","hashOfConfig":"54"},{"size":2344,"mtime":1697798800584,"results":"98","hashOfConfig":"54"},{"size":2623,"mtime":1698304860457,"results":"99","hashOfConfig":"54"},{"size":1580,"mtime":1697798800572,"results":"100","hashOfConfig":"54"},{"size":512,"mtime":1697798800569,"results":"101","hashOfConfig":"54"},{"size":1953,"mtime":1697798800565,"results":"102","hashOfConfig":"54"},{"size":1870,"mtime":1697798800567,"results":"103","hashOfConfig":"54"},{"size":1971,"mtime":1697798800568,"results":"104","hashOfConfig":"54"},{"size":3072,"mtime":1698219447991,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"171bxkq",{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\index.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\App.js",["275"],[],"import { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\r\nimport MessagePage from \"./component/MessagePage\";\r\nimport UsersPage from \"./component/UsersPage\";\r\nimport InsertPage from \"./component/InsertPage\";\r\nimport Login from \"./component/authentication/Login\";\r\n// Import new page down here (Follow this format to import new page)\r\nimport NewPageTest from \"./component/NewPageTest\";\r\nimport Makanan from \"./component/MakananPage\";\r\n\r\n// Insert new import statement here\r\nimport LandingPage from \"./component/LandingPage\";\r\nimport BaucarFormPage from './component/forms/BaucarFormPage'; \r\nimport WangFormPage from './component/forms/WangFormPage';\r\nimport WangNextPage from './component/forms/WangNextPage';\r\nimport KhairatFormPage from './component/forms/KhairatFormPage'; \r\nimport KhairatNextPage from './component/forms/KhairatNextPage'; \r\nimport PerantiFormPage from './component/forms/PerantiFormPage';\r\nimport PerantiNextPage from './component/forms/PerantiNextPage'; \r\nimport NavBar from \"./component/NavBar\";\r\nimport TermsConditions from \"./component/TermsCondition\";\r\nimport ApplicationListPage from \"./component/admin/application/ApplicationListPage\";\r\nimport EvaluationPage from \"./component/admin/evaluation/EvaluationPage\";\r\nimport AnalyticDashboard from \"./component/admin/AnalyticDashboard\";\r\nimport AdminDashboard from \"./component/admin/AdminDashboard\";\r\nimport UploadPage from \"./component/UploadPage\";\r\nimport AnalyticGraph from \"./component/admin/AnalyticGraph\";\r\nimport TestAllFunction from \"./component/TestAllFunction\";\r\nimport WelcomePage from \"./component/WelcomePage\";\r\nimport VendorListPage from \"./component/admin/vendor/VendorListPage\";\r\nimport CouponPage from \"./component/CouponPage\";\r\nimport FoodApplication from \"./component/FoodApplication\";\r\nimport HistoryFood from \"./component/HistoryFood\";\r\n\r\n// Pay attention to this function\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyD3GnS-yJudsXEAn3-gMEcrFeMOyu1lm08\",\r\n  authDomain: \"siswausm-e2238.firebaseapp.com\",\r\n  projectId: \"siswausm-e2238\",\r\n  storageBucket: \"siswausm-e2238.appspot.com\",\r\n  messagingSenderId: \"165270863272\",\r\n  appId: \"1:165270863272:web:d6208264ba08a5f555719d\",\r\n  measurementId: \"G-B2E66SYEEC\"\r\n};\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <NavBar />\r\n        <Routes>\r\n          <Route path=\"/\" element={<WelcomePage />} />\r\n          <Route path=\"/message\" element={<MessagePage />} />\r\n          <Route path=\"/makanan\" element={<Makanan />} />\r\n          <Route path=\"/users\" element={<UsersPage />} />\r\n          <Route path=\"/insert\" element={<InsertPage />} />\r\n\r\n           {/* Add new page down here as new route (Use the below format) */}\r\n          <Route path=\"/newpagetest\" element={<NewPageTest />} />\r\n          <Route path=\"/ApplicationListPage\" element={<ApplicationListPage />} />\r\n          <Route path=\"/TermsConditions\" element={<TermsConditions />} />\r\n          <Route path=\"/EvaluationPage\" element={<EvaluationPage />} />\r\n          <Route path=\"/AnalyticDashboard\" element={<AnalyticDashboard />} />\r\n          <Route path=\"/AdminDashboard\" element={<AdminDashboard />} />\r\n          <Route path=\"/UploadPage\" element={<UploadPage />} />\r\n          <Route path=\"/AnalyticGraph\" element={<AnalyticGraph />} />\r\n          <Route path=\"/TestAllFunction\" element={<TestAllFunction />} />\r\n          <Route path=\"/VendorListPage\" element={<VendorListPage />} />\r\n          <Route path=\"/CouponPage\" element={<CouponPage />} />\r\n          <Route path=\"/FoodApplication\" element={<FoodApplication />} />\r\n          <Route path=\"/HistoryFood\" element={<HistoryFood />} />\r\n\r\n          {/* Add new Landing Page route */}\r\n          <Route path=\"/LandingPage\" element={<LandingPage />} />\r\n          <Route path=\"/WelcomePage\" element={<WelcomePage />} />\r\n\r\n          {/* Add new Landing Page route */}\r\n          <Route path=\"/Baucar_FormPage\" element={<BaucarFormPage />} />\r\n          <Route path=\"/Khairat_FormPage\" element={<KhairatFormPage />} />\r\n          <Route path=\"/Khairat_NextPage\" element={<KhairatNextPage />} />\r\n          <Route path=\"/Wang_FormPage\" element={<WangFormPage />} />\r\n          <Route path=\"/Wang_NextPage\" element={<WangNextPage />} />\r\n          <Route path=\"/Peranti_FormPage\" element={<PerantiFormPage />} />\r\n          <Route path=\"/Peranti_NextPage\" element={<PerantiNextPage />} />\r\n          <Route path=\"/Login\" element={<Login />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\TermsCondition.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\UsersPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\MakananPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\TestAllFunction.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\MessagePage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\NewPageTest.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\UploadPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\InsertPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\LandingPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\WelcomePage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\NavBar.js",["276"],[],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Cookies from 'js-cookie';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AppBar, Toolbar, Button, IconButton, Drawer, List, ListItem, ListItemText, Divider } from \"@mui/material\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport { useMediaQuery, useTheme } from \"@mui/material\";\r\nimport \"./NavBar.css\"; // Import your CSS file\r\n\r\nfunction Navbar() {\r\n  const email = Cookies.get('email');\r\n  const password = Cookies.get('password');\r\n  const navigate = useNavigate();\r\n  const theme = useTheme();\r\n  const isResponsive = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const [isDrawerOpen, setDrawerOpen] = useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setDrawerOpen(!isDrawerOpen);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    Cookies.remove('email');\r\n    Cookies.remove('password');\r\n    navigate('/Login');\r\n  };\r\n  const renderItemLinks = () => {\r\n    if (!isResponsive) {\r\n      return (\r\n        <div>\r\n          <Link href=\"https://hac.usm.my\">\r\n            <Button style={{ color: 'white' }}>Penginapan</Button>\r\n          </Link>\r\n  \r\n          <Link href=\"https://www.instagram.com/unitkaunselingusm/?hl=en\">\r\n            <Button style={{ color: 'white' }}>Kaunseling</Button>\r\n          </Link>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  \r\n\r\n  const renderLoginLogoutLink = () => {\r\n    if (email && password) {\r\n      return (\r\n        <Button\r\n          style={{\r\n            color: \"#0d6efd\",\r\n            textDecoration: \"underline\",\r\n            transition: \"color 0.3s\",\r\n          }}\r\n          onMouseEnter={(e) => (e.target.style.color = \"#1752c5\")}\r\n          onMouseLeave={(e) => (e.target.style.color = \"#0d6efd\")}\r\n          onClick={handleLogout}\r\n        >\r\n          Log Keluar\r\n        </Button>\r\n      );\r\n    } else if (!isResponsive) {\r\n      // Render \"Log Masuk\" link only when not in responsive mode\r\n      return (\r\n        <Link to=\"/Login\">\r\n          <Button className=\"p-4\" style={{ color: 'white' }}>Log Masuk</Button>\r\n        </Link>\r\n      );\r\n    }\r\n    // Don't render the \"Log Masuk\" link in the Navbar in responsive mode\r\n    return null;\r\n  };\r\n  \r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"fixed\" className=\"custom-navbar\" sx={{ backgroundColor: \"#491E6E\" }}>\r\n        <Toolbar>\r\n          {isResponsive && (\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n              onClick={handleDrawerToggle}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n          )}\r\n          <div className=\"flex-container\">\r\n            <a className=\"navbar-brand\">\r\n              <Link to=\"/\" className=\"p-4\">\r\n                <img src=\"/navBar_Logo.png\" alt=\"Your Logo\" style={{ width: \"200px\" }} />\r\n              </Link>\r\n            </a>\r\n            <div className=\"right-section\">\r\n              {renderItemLinks()}\r\n              {renderLoginLogoutLink()}\r\n            </div>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer anchor=\"right\" open={isResponsive && isDrawerOpen} onClose={handleDrawerToggle}>\r\n        <List>\r\n          <ListItem button component=\"a\" href=\"https://hac.usm.my\">\r\n            <ListItemText primary=\"Penginapan\" />\r\n          </ListItem>\r\n          <ListItem button component=\"a\" href=\"https://www.instagram.com/unitkaunselingusm/?hl=en\">\r\n            <ListItemText primary=\"Kaunseling\" />\r\n          </ListItem>\r\n          <ListItem button component=\"a\" href=\"/Login\">\r\n            <ListItemText primary=\"Log Masuk\" />\r\n          </ListItem>\r\n          <Divider />\r\n          {renderLoginLogoutLink()}\r\n        </List>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\CouponPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\HistoryFood.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\AnalyticGraph.js",["277","278","279"],[],"import React, { useState, useEffect } from 'react';\r\nimport { BarChart } from \"@mui/x-charts/BarChart\";\r\nimport \"./AnalyticGraph.css\";\r\n\r\nexport default function AnalyticGraph() {\r\n  const [dataCounts, setDataCounts] = useState({});\r\n\r\n  // Data for the chart\r\n  const [data, setData] = useState([\r\n    { group: \"khairat\", new: 0, pending: 0, completed: 0, rejected: 0 },\r\n    { group: \"makanan\", new: 0, pending: 0, completed: 0, rejected: 0 },\r\n    { group: \"wang\", new: 0, pending: 0, completed: 0, rejected: 0 },\r\n    { group: \"peranti\", new: 0, pending: 0, completed: 0, rejected: 0 },\r\n]);\r\n\r\n  \r\nuseEffect(() => {\r\n  const apiUrl = 'http://localhost:8000/countByStatus'; // Update the URL to match your server route\r\n\r\n  const statusData = [\r\n    { status: 'baharu', key: 'new' },\r\n    { status: 'dalam proses', key: 'pending' },\r\n    { status: 'lulus', key: 'completed' },\r\n    { status: 'tolak', key: 'rejected' },\r\n    // Add more status categories as needed\r\n  ];\r\n\r\n  // Create an array of promises for each status category within each group\r\n  const requests = data.map(({ group }) => {\r\n    return statusData.map(async ({ status, key }) => {\r\n      const data = {\r\n        table: 'request',\r\n        status: status,\r\n        req_type: group\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(apiUrl, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(data),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch ${status} count for group: ${group}`);\r\n        }\r\n\r\n        const responseData = await response.json();\r\n        // console.log(group + \"|\" + status + \": \" + responseData[0].count)\r\n        return { group, key, count: responseData[0].count };\r\n      } catch (err) {\r\n        console.error(err);\r\n        return null;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Execute all promises concurrently\r\n  Promise.all(requests.flat())\r\n      .then((counts) => {\r\n        const updatedData = [...data];\r\n        let count_incr = 0\r\n        let index = 0\r\n        counts.forEach(({ group, key, count }) => {\r\n          index = Math.floor(count_incr / 4);\r\n          // console.log(key + ': ' + updatedData[index][key]);\r\n          updatedData[index][key] = count;\r\n          // console.log(updatedData[index].key);\r\n          // console.log(updatedData[index].key)\r\n          // updatedData[index].key = count;\r\n          count_incr ++;\r\n          // updatedData[group][key] = count;\r\n          // console.log(group)\r\n        });\r\n  \r\n        setData(updatedData);\r\n        // console.log(updatedData)\r\n      })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n}, []);\r\n\r\n  // Prepare data for X-axis\r\n  const xAxisData = [{ scaleType: \"band\", data: data.map((item) => item.group) }];\r\n\r\n  // Prepare data for series\r\n  const seriesData = [\r\n    { data: data.map((item) => item.new), name: \"New\", color: \"#ff9100\" },\r\n    { data: data.map((item) => item.pending), name: \"Pending\", color: \"#16adf3\" },\r\n    { data: data.map((item) => item.completed), name: \"Completed\", color: \"#51f830\" },\r\n    { data: data.map((item) => item.rejected), name: \"Rejected\", color: \"#f5365c\" },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      {/* Bar Chart */}\r\n      <BarChart xAxis={xAxisData} series={seriesData} width={1000} height={350} />\r\n\r\n      {/* Legend */}\r\n      <div className=\"legend\">\r\n        {/* Legend items */}\r\n        <div className=\"legend-item\">\r\n          <div className=\"legend-color new-color\"></div>\r\n          <div className=\"legend-label\">Baharu</div>\r\n        </div>\r\n        <div className=\"legend-item\">\r\n          <div className=\"legend-color pending-color\"></div>\r\n          <div className=\"legend-label\">Dalam Proses</div>\r\n        </div>\r\n        <div className=\"legend-item\">\r\n          <div className=\"legend-color completed-color\"></div>\r\n          <div className=\"legend-label\">Lulus</div>\r\n        </div>\r\n        <div className=\"legend-item\">\r\n          <div className=\"legend-color rejected-color\"></div>\r\n          <div className=\"legend-label\">Ditolak</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\FoodApplication.js",["280"],[],"import React, { useState } from \"react\";\r\nimport './FoodApplication.css';\r\nimport DragDrop from \"./functions/DragDrop\"; // Import the DragAndDrop component\r\n\r\nfunction FoodApplication() {\r\n  const [sponsorType, setSponsorType] = useState(\"\"); // State for selected options\r\n  const [icNumFile, setIcNumFile] = useState(null); // Maintain the selectedFile state\r\n  const [paymentSlipFile, setPaymentSlipFile] = useState(null); // Maintain the selectedFile state\r\n  const [foodJustification, setFoodJustification] = useState(\"\"); // State for justification text\r\n  const [customOption, setCustomOption] = useState(\"\"); // State for custom \"Jenis Tajaan\"\r\n\r\n  const [formData, setFormData] = useState({\r\n    requestor_id: \"202124\",\r\n    request_type: \"makanan\"\r\n  });\r\n\r\nconst handleSponsorTypeChange = (e) => {\r\n  const selectedOption = e.target.value;\r\n  setSponsorType(selectedOption);\r\n  if (selectedOption === \"Lain\") {\r\n    setCustomOption(\"\");\r\n  }\r\n};\r\n\r\n  const uploadFile = async (file, category) => {\r\n    if (file) {\r\n      try {\r\n        \r\n        const uploadData = new FormData();\r\n        uploadData.append(\"file\", file);\r\n        const url = \"http://localhost:8000/upload/\" + category\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          body: uploadData,\r\n        });\r\n  \r\n        if (response.ok) {\r\n          const filename = await response.text();\r\n          return filename;\r\n  \r\n        } else {\r\n          // Handle any errors\r\n          console.error(\"File upload failed.\");\r\n          alert(\"File upload failed.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        alert(\"An error occurred during file upload.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!sponsorType || (sponsorType === \"Lain\" && !customOption) ||\r\n      !icNumFile ||\r\n      !paymentSlipFile ||\r\n      !foodJustification) {\r\n      alert(\"Please fill in all the required fields.\");\r\n      return;\r\n    }\r\n  \r\n    // Define the array of promises for file uploads\r\n    const uploadPromises = [\r\n      uploadFile(icNumFile, \"ic\"),\r\n      uploadFile(paymentSlipFile, \"paymentslip\"),\r\n    ];\r\n  \r\n    try {\r\n      // Wait for all file upload promises to resolve\r\n      const results = await Promise.all(uploadPromises);\r\n\r\n      const formDataJSON = {\r\n        ic_num_file: results[0],\r\n        payment_slip_file: results[1],\r\n        sponsor_type: sponsorType === \"Lain\" ? customOption : sponsorType,\r\n        food_justification: foodJustification,\r\n        requestor_id: formData.requestor_id,\r\n        request_type: formData.request_type,\r\n      };\r\n\r\n      const apiUrl = \"http://localhost:8000/insert-request\"; // Update with your server's URL\r\n      console.log(formDataJSON)\r\n\r\n\r\n      const response = await fetch(apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(formDataJSON),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        // if (true) {\r\n\r\n        // If the server responds with a 200 status code (OK), you can handle success here\r\n        alert(\"Form data sent successfully!\");\r\n        \r\n        // setSponsorType(\"\");\r\n        // setIcNumFile(null)\r\n        // setPaymentSlipFile(null);\r\n        // setFoodJustification(\"\");\r\n      } else {\r\n        console.log(formData);\r\n        // Handle errors or display error messages here\r\n        console.error(\"Form data submission failed.\");\r\n        alert(\"Something wrong on the backend!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during form submission:\", error);\r\n    }\r\n  };\r\n\r\n  const buttonStyle = {\r\n    backgroundColor: '#491E6E',\r\n    borderColor: '#491E6E',\r\n    color: 'white',\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"mt-5 form-page\">\r\n      <div className=\"form-column form-column-left\">\r\n        <h2 className=\"left-header\">Borang Permohonan<br />Makanan</h2>\r\n        <p className=\"left-header-para\">#USMCares</p>\r\n      </div>\r\n      <div className=\"form-column form-column-right\">\r\n        <h2 className=\"right-header\">Maklumat Baucar Makanan</h2>\r\n        <p className=\"right-header-para\">Pastikan maklumat yang diisi tepat & sahih</p>\r\n        <form className=\"form-style\"  onSubmit={handleSubmit}>\r\n          \r\n        <div className=\"form-group select-food-container\">\r\n            <label htmlFor=\"options-food\" className=\"select-food-label\">Jenis Tajaan:</label>\r\n            <div className=\"select-food-wrapper\">\r\n            <select id=\"sponsor_type\" name=\"sponsor_type\" className=\"select\" onChange={handleSponsorTypeChange} value={sponsorType}>\r\n                <option value=\"\">Jenis Tajaan</option>\r\n                <option value=\"PTPTN\">PTPTN</option>\r\n                <option value=\"JPA\">JPA</option>\r\n                <option value=\"KPM\">KPM</option>\r\n                <option value=\"Lain\">Lain-lain</option>\r\n              </select>\r\n            </div>\r\n            {sponsorType.includes(\"Lain\") && (\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"customOption\">Sila Nyatakan Jenis Tajaan Lain:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"customOption\"\r\n                  name=\"customOption\"\r\n                  value={customOption}\r\n                  onChange={(e) => setCustomOption(e.target.value)}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email2\">Salinan Kad Pengenalan:</label>\r\n            <DragDrop selectedFile={icNumFile} setSelectedFile={setIcNumFile} /> {/* Pass selectedFile and setSelectedFile as props */}       \r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email2\">Salinan Slip Gaji Ibu Bapa:</label>\r\n            <DragDrop selectedFile={paymentSlipFile} setSelectedFile={setPaymentSlipFile} /> {/* Pass selectedFile and setSelectedFile as props */}       \r\n          </div>\r\n\r\n          {/* Justification textarea */}\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"justification\">Justifikasi Untuk Menyokong Permohonan:</label>\r\n            <textarea\r\n              id=\"food_justification\"\r\n              name=\"food_justification\"\r\n              value={foodJustification}\r\n              onChange={(e) => setFoodJustification(e.target.value)}\r\n              className=\"reason-textarea\"\r\n              placeholder=\"Saya memerlukan bantuan ini kerana...\"\r\n            />\r\n          </div>\r\n\r\n          <button type=\"submit\" style={buttonStyle}>Submit</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FoodApplication;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\AdminDashboard.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\authentication\\Login.js",["281"],[],"import Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React, { useState } from \"react\";\r\nimport Cookies from 'js-cookie'; // Import the js-cookie library\r\nimport {CardMedia} from \"@mui/material\";\r\nimport Box from '@mui/material/Box';\r\nimport RegistrationDialog from './RegisterDialog';\r\n\r\nfunction Login() {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage] = useState(\"\");\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleEmailChange = (e) => {\r\n    setEmail(e.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n        credentials: \"include\", // Send cookies with the request\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Authentication successful, show an alert message\r\n        alert(\"Login successful\");\r\n        // Save credentials as secure cookies\r\n        Cookies.set('email', email, { secure: true });\r\n        Cookies.set('password', password, { secure: true });\r\n\r\n        window.location.href = '/AdminDashboard';\r\n\r\n      } else if (response.status === 401) {\r\n        // Handle authentication failure, show an error message in an alert\r\n        alert(\"Login failed. Invalid email or password.\");\r\n      } else {\r\n        // Handle other HTTP error codes\r\n        alert(\"An error occurred while logging in.\");\r\n      }\r\n    } catch (error) {\r\n      // Handle network errors or other issues\r\n      console.error(\"Error logging in:\", error);\r\n      alert(\"An error occurred while logging in.\");\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const buttonStyle = {\r\n    backgroundColor: '#491E6E',\r\n    borderColor: '#491E6E',\r\n    color: 'white',\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container id=\"main-container\" className=\"d-grid h-100\" >\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n        }}\r\n        >\r\n        <Form id=\"sign-in-form\" className=\"text-center p-3 w-100\"\r\n        style={{ maxWidth: '400px' }} \r\n        onSubmit={handleLogin}>\r\n         <CardMedia component=\"img\" alt=\"Service 1 Banner\" height=\"140\" image=\"wang-pic.jpg\" />\r\n          <h1 className=\"mb-4 fs-3 fw-normal\"        \r\n          style={{\r\n              padding: '10px',\r\n            }}\r\n            >Log Masuk</h1>\r\n          <Form.Group controlId=\"sign-in-email-address\">\r\n            <Form.Control\r\n              type=\"email\"\r\n              size=\"lg\"\r\n              placeholder=\"Emel Pelajar\"\r\n              autoComplete=\"username\"\r\n              className=\"position-relative\"\r\n              value={email}\r\n              onChange={handleEmailChange}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3 mt-3\" controlId=\"sign-in-password\">\r\n            <Form.Control\r\n              type=\"password\"\r\n              size=\"lg\"\r\n              placeholder=\"Kata Laluan\"\r\n              autoComplete=\"current-password\"\r\n              className=\"position-relative\"\r\n              value={password}\r\n              onChange={handlePasswordChange}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"d-flex justify-content-center mb-3 #FFFFFF\" controlId=\"remember-me\">\r\n            <Form.Check label=\"Ingat Kata Laluan\" />\r\n          </Form.Group>\r\n          <div className=\"d-grid\">\r\n            <Button \r\n            style={{\r\n              backgroundColor: '#491E6E',\r\n              borderColor: '#491E6E',\r\n              color: 'white',\r\n              padding: '20px',\r\n              borderRadius: '10px',\r\n            }}\r\n            type=\"submit\">\r\n              Log Masuk\r\n            </Button>\r\n          </div>\r\n          <div className=\"d-grid\" style={{marginTop:'10px'}}>\r\n            <Button variant=\"outlined\"\r\n            style={{\r\n              borderColor: '#491E6E',\r\n              padding: '5px',\r\n            }}\r\n            onClick={handleOpen}\r\n            >\r\n              Daftar Pengguna\r\n            </Button>\r\n            <RegistrationDialog open={open} handleClose={handleClose} />\r\n          </div>\r\n          {errorMessage && <div className=\"text-danger mt-3\">{errorMessage}</div>}\r\n          <p className=\"mt-5 text-muted\">&copy; Developed by USM Tech Team</p>\r\n        </Form>\r\n        </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\vendor\\VendorListPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\PerantiNextPage.js",["282"],[],"import React, { useState } from \"react\";\r\nimport DragDrop from \"../functions/DragDrop\";\r\n\r\nfunction PerantiNextPage() {\r\n  const [paymentSlipFile, setPaymentSlipFile] = useState(null); // Maintain the selectedFile state\r\n  const [deviceImageFile, setDeviceImageFile] = useState(null); // Maintain the selectedFile state\r\n  const [sponsorType, setSponsorType] = useState(\"\"); // State for selected options\r\n  const [deviceType, setDeviceType] = useState(\"\"); // State for the reason text area\r\n  const [deviceDetails, setDeviceDetails] = useState(\"\"); // State for the reason text area\r\n\r\n  const [formData, setFormData] = useState({\r\n    requestor_id: \"202124\",\r\n    request_type: \"peranti\"\r\n  });\r\n\r\n  const handleSponsorTypeChange = (e) => {\r\n      setSponsorType(e.target.value);\r\n  };\r\n\r\n  const handleDeviceTypeChange = (e) => {\r\n    setDeviceType(e.target.value);\r\n  };\r\n\r\n  const handleDeviceDetailsChange = (e) => {\r\n    setDeviceDetails(e.target.value);\r\n  };\r\n\r\n  const uploadFile = async (file) => {\r\n    if (file) {\r\n      try {\r\n        \r\n        const uploadData = new FormData();\r\n        uploadData.append(\"file\", file);\r\n        \r\n\r\n        const response = await fetch(\"http://localhost:8000/upload\", {\r\n          method: \"POST\",\r\n          body: uploadData,\r\n        });\r\n  \r\n        if (response.ok) {\r\n          const filename = await response.text();\r\n\r\n          return filename;\r\n  \r\n        } else {\r\n          // Handle any errors\r\n          console.error(\"File upload failed.\");\r\n          alert(\"File upload failed.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        alert(\"An error occurred during file upload.\");\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!sponsorType ||\r\n      !deviceType||\r\n      !deviceDetails ||\r\n      !paymentSlipFile ||\r\n      !deviceImageFile) {\r\n      alert(\"Please fill in all the required fields.\");\r\n      return;\r\n    }\r\n  \r\n    // Define the array of promises for file uploads\r\n    const uploadPromises = [\r\n      uploadFile(paymentSlipFile, \"payment_slip_file\"),\r\n      uploadFile(deviceImageFile, \"device_pic_file\"),\r\n    ];\r\n  \r\n    try {\r\n      // Wait for all file upload promises to resolve\r\n      const results = await Promise.all(uploadPromises);\r\n\r\n      const formDataJSON = {\r\n        payment_slip_file: results[0],\r\n        device_pic_file: results[1],\r\n        device_type: deviceType,\r\n        device_details: deviceDetails,\r\n        requestor_id: formData.requestor_id,\r\n        request_type: formData.request_type,\r\n        sponsor_type: sponsorType\r\n      };\r\n\r\n      const apiUrl = \"http://localhost:8000/insert-request\"; // Update with your server's URL\r\n  \r\n      // Create a POST request to send the formData to the server\r\n      const response = await fetch(apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(formDataJSON),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        // If the server responds with a 200 status code (OK), you can handle success here\r\n        alert(\"Form data sent successfully!\");\r\n        \r\n        setSponsorType(\"\")\r\n        setDeviceType(\"\");\r\n        setDeviceDetails(\"\");\r\n        setPaymentSlipFile(\"\");\r\n        setDeviceImageFile(\"\");\r\n      } else {\r\n        console.log(formData);\r\n        // Handle errors or display error messages here\r\n        console.error(\"Form data submission failed.\");\r\n        alert(\"Something wrong on the backend!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during form submission:\", error);\r\n    }\r\n  };\r\n\r\n  const buttonStyle = {\r\n    backgroundColor: \"#491E6E\",\r\n    borderColor: \"#491E6E\",\r\n    color: \"white\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-5 form-page\">\r\n      <div className=\"form-column form-column-left\">\r\n        <h2 className=\"left-header\">\r\n          Borang Permohonan<br />Bantuan Khairat<br />Kematian\r\n        </h2>\r\n        <p className=\"left-header-para\">#USMCares</p>\r\n      </div>\r\n      <div className=\"form-column form-column-right\">\r\n        <h2 className=\"right-header\">Maklumat Status Kewangan</h2>\r\n        <p className=\"right-header-para\">Pastikan maklumat yang diisi tepat & sahih</p>\r\n        <form className=\"form-style\"  onSubmit={handleSubmit}>\r\n          \r\n          <div className=\"form-group select-container-wang\">\r\n            <label htmlFor=\"options\" className=\"select-label\">\r\n              Jenis Tajaan:\r\n            </label>\r\n            <select id=\"sponsor_type\" name=\"sponsor_type\" className=\"select\" onChange={handleSponsorTypeChange}>\r\n              <option value=\"\">Jenis Tajaan</option>\r\n              <option value=\"JPA\">JPA</option>\r\n              <option value=\"PTPTN\">PTPTN</option>\r\n              <option value=\"Others\">Others</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email2\">Salinan Slip Gaji Ibu Bapa:</label>\r\n            <DragDrop selectedFile={paymentSlipFile} setSelectedFile={setPaymentSlipFile} /> {/* Pass selectedFile and setSelectedFile as props */}          </div>\r\n\r\n          <h2 style={{ textAlign: \"center\", marginTop: \"50px\", marginBottom: \"5px\" }}>Maklumat Peranti</h2>\r\n          <p style={{ textAlign: \"center\"}}>Pastikan maklumat yang diisi tepat & sahih</p>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"deviceDetails\">Maklumat Kerosakan Peranti:</label>\r\n            <textarea\r\n              id=\"device_details\"\r\n              name=\"device_details\"\r\n              value={deviceDetails}\r\n              onChange={handleDeviceDetailsChange}\r\n              className=\"reason-textarea\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"device_type\">Jenama Peranti:</label>\r\n            <input \r\n            type=\"text\" \r\n            id=\"device_type\" \r\n            name=\"device_type\" \r\n            value={deviceType}\r\n            onChange={handleDeviceTypeChange} \r\n            placeholder=\"Lenove/ Acer/ HP/ etc\" />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email2\">Gambar Peranti:</label>\r\n            <DragDrop selectedFile={deviceImageFile} setSelectedFile={setDeviceImageFile} /> {/* Pass selectedFile and setSelectedFile as props */}          </div>\r\n\r\n          <button type=\"submit\" style={buttonStyle}>\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PerantiNextPage;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\BaucarFormPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\KhairatNextPage.js",["283"],[],"import React, { useState, useEffect } from \"react\";\r\nimport DragDrop from \"../functions/DragDrop\"; // Import the DragAndDrop component\r\n\r\nfunction KhairatNextPage() {\r\n  const [deathCertFile, setDeathCertFile] = useState(null); // Maintain the selectedFile state\r\n  const [icNumFile, setIcNumFile] = useState(null); // Maintain the selectedFile state\r\n  const [bankStatementFile, setBankStatementFile] = useState(null); // Maintain the selectedFile state\r\n  const [transportFareFile, setTransportFareFile] = useState(null); // Maintain the selectedFile state\r\n\r\n  const [formData, setFormData] = useState({\r\n    requestor_id: \"202124\",\r\n    req_relationship: \"\",\r\n    request_type: \"khairat\"\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n  \r\n  const uploadFile = async (file) => {\r\n    if (file) {\r\n      try {\r\n        \r\n        const uploadData = new FormData();\r\n        uploadData.append(\"file\", file);\r\n        \r\n\r\n        const response = await fetch(\"http://localhost:8000/upload\", {\r\n          method: \"POST\",\r\n          body: uploadData,\r\n        });\r\n  \r\n        if (response.ok) {\r\n          const filename = await response.text();\r\n\r\n          return filename;\r\n  \r\n        } else {\r\n          // Handle any errors\r\n          console.error(\"File upload failed.\");\r\n          alert(\"File upload failed.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        alert(\"An error occurred during file upload.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n    const handleSubmit = async (e) => {\r\n      e.preventDefault();\r\n    \r\n      if (!formData.req_relationship ||\r\n        !deathCertFile ||\r\n        !icNumFile ||\r\n        !bankStatementFile||\r\n        !transportFareFile) {\r\n        alert(\"Please fill in all the required fields.\");\r\n        return;\r\n      }\r\n    \r\n      // Define the array of promises for file uploads\r\n      const uploadPromises = [\r\n        uploadFile(deathCertFile, \"death_cert_file\"),\r\n        uploadFile(icNumFile, \"ic_num_file\"),\r\n        uploadFile(bankStatementFile, \"bank_statement_file\"),\r\n        uploadFile(transportFareFile, \"transport_fare_file\"),\r\n      ];\r\n    \r\n      try {\r\n        // Wait for all file upload promises to resolve\r\n        const results = await Promise.all(uploadPromises);\r\n\r\n        const formDataJSON = {\r\n          death_cert_file: results[0],\r\n          ic_num_file: results[1],\r\n          bank_statement_file: results[2],\r\n          transport_fare_file: results[3], \r\n          req_relationship: formData.req_relationship,\r\n          requestor_id: formData.requestor_id,\r\n          request_type: formData.request_type\r\n        };\r\n\r\n        const apiUrl = \"http://localhost:8000/insert-request\"; // Update with your server's URL\r\n    \r\n        // Create a POST request to send the formData to the server\r\n        const response = await fetch(apiUrl, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(formDataJSON),\r\n        });\r\n    \r\n        if (response.ok) {\r\n          // If the server responds with a 200 status code (OK), you can handle success here\r\n          alert(\"Form data sent successfully!\");\r\n\r\n          setFormData(() => {\r\n            // Reset the form fields by clearing the formData state\r\n            return {\r\n              req_relationship: \"\"\r\n            };\r\n          }, () => {\r\n            console.log(formData); // This will log the updated formData\r\n          });\r\n    \r\n          setDeathCertFile(null);\r\n          setIcNumFile(null);\r\n          setBankStatementFile(null);\r\n          setTransportFareFile(null);\r\n        } else {\r\n          console.log(formData);\r\n          // Handle errors or display error messages here\r\n          console.error(\"Form data submission failed.\");\r\n          alert(\"Something wrong on the backend!\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error during form submission:\", error);\r\n      }\r\n    };\r\n    \r\n  const buttonStyle = {\r\n    backgroundColor: '#491E6E',\r\n    borderColor: '#491E6E',\r\n    color: 'white',\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-5 form-page\">\r\n      <div className=\"form-column form-column-left\">\r\n        <h2 className=\"left-header\">Borang Permohonan<br />Makanan</h2>\r\n        <p className=\"left-header-para\">#USMCares</p>\r\n      </div>\r\n      <div className=\"form-column form-column-right\">\r\n        <h2 className=\"right-header\">Maklumat Khairat Kematian</h2>\r\n        <p className=\"right-header-para\">Pastikan maklumat yang diisi tepat & sahih</p>\r\n        <form class=\"form-style\"  onSubmit={handleSubmit}>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"relationship\">Hubungan:</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Ibu/ Ayah/ Adik-beradik\"\r\n              id=\"req_relationship\"\r\n              name=\"req_relationship\"\r\n              value={formData.req_relationship}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email2\">Salinan Sijil Kematian:</label>\r\n            <DragDrop selectedFile={deathCertFile} setSelectedFile={setDeathCertFile} /> {/* Pass selectedFile and setSelectedFile as props */}          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email2\">Salinan Kad Pengenalan:</label>\r\n            <DragDrop selectedFile={icNumFile} setSelectedFile={setIcNumFile} /> {/* Pass selectedFile and setSelectedFile as props */}          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email2\">Salinan Penyata Bank:</label>\r\n            <DragDrop selectedFile={bankStatementFile} setSelectedFile={setBankStatementFile} /> {/* Pass selectedFile and setSelectedFile as props */}          </div>\r\n\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email2\">Salinan Resit Asal Tambang Perjalanan (Tujuan Pengebumian):</label>\r\n            <DragDrop selectedFile={transportFareFile} setSelectedFile={setTransportFareFile} /> {/* Pass selectedFile and setSelectedFile as props */}          </div>\r\n\r\n\r\n          <button type=\"submit\" style={buttonStyle}>Submit</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default KhairatNextPage;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\AnalyticDashboard.js",["284","285"],[],"import React, { useState, useEffect } from 'react';\r\nimport \"./AnalyticDashboard.css\";\r\n\r\nimport Container from \"@mui/material/Container\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nimport MoreTimeIcon from '@mui/icons-material/MoreTime';\r\nimport PendingActionsIcon from '@mui/icons-material/PendingActions';\r\nimport DoneAllIcon from '@mui/icons-material/DoneAll';\r\nimport ThumbDownOffAltIcon from '@mui/icons-material/ThumbDownOffAlt';\r\n\r\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\n\r\nfunction AnalyticDashboard() {\r\n  const [baharuCount, setBaharuCount] = useState(null);\r\n  const [dalamProsesCount, setDalamProsesCount] = useState(null);\r\n  const [lulusCount, setLulusCount] = useState(null);\r\n  const [tolakCount, setTolakCount] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const apiUrl = 'http://localhost:8000/countByStatus'; // Update the URL to match your server route\r\n\r\n    const statusData = [\r\n      { status: 'baharu', stateSetter: setBaharuCount },\r\n      { status: 'dalam proses', stateSetter: setDalamProsesCount },\r\n      { status: 'lulus', stateSetter: setLulusCount },\r\n      { status: 'tolak', stateSetter: setTolakCount },\r\n      // Add more status categories as needed\r\n    ];\r\n\r\n    // Create an array of promises for each status category\r\n    const requests = statusData.map(async ({ status }) => {\r\n      const data = {\r\n        table: 'request',\r\n        status: status,\r\n        req_type: 'all'\r\n      };\r\n      try {\r\n        const response = await fetch(apiUrl, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(data),\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch ${status} count`);\r\n        }\r\n        const data_1 = await response.json();\r\n        return data_1[0].count;\r\n      } catch (err) {\r\n        console.error(err);\r\n        return null;\r\n      }\r\n    });\r\n\r\n    // Execute all promises concurrently\r\n    Promise.all(requests)\r\n      .then((counts) => {\r\n        // Update state for each status category\r\n        statusData.forEach((item, index) => {\r\n          const { stateSetter } = item;\r\n          stateSetter(counts[index]);\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    \r\n    <div className=\"analyticDashboard pb pt pt-md\">\r\n      <Container maxWidth=\"xl\">\r\n        <h2 className=\"status-title\">Dashboard BHEPA</h2>\r\n        <br></br>\r\n        <div className=\"analyticDashboard-body\">\r\n          <Grid container spacing={3}>\r\n          <Grid item lg={3} xl={3}>\r\n              <Card className=\"card card-lift--hover\">\r\n                <CardContent className=\"card-body\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-9\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                          <Typography variant=\"h6\">Baharu</Typography>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                          <Typography variant=\"h4\">{baharuCount}</Typography> \r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-3 text-right\">\r\n                      <div className=\"icon bg-orange text-white rounded-circle shadow\">\r\n                        <MoreTimeIcon />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {/* <div className=\"row mt-3\">\r\n                    <div className=\"col-12\">\r\n                      <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                        <span className=\"text-success mr-2\">\r\n                          <ArrowUpwardIcon /> 3.48%\r\n                        </span>{\" \"}\r\n                        Sejak bulan lepas\r\n                      </Typography>\r\n                    </div>\r\n                  </div> */}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item lg={3} xl={3}>\r\n              <Card className=\"card card-lift--hover\">\r\n                <CardContent className=\"card-body\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-9\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                          <Typography variant=\"h6\">Dalam Proses</Typography>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                          <Typography variant=\"h4\">{dalamProsesCount}</Typography>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-3 text-right\">\r\n                      <div className=\"icon bg-blue text-white rounded-circle shadow\">\r\n                        <PendingActionsIcon />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {/* <div className=\"row mt-3\">\r\n                    <div className=\"col-12\">\r\n                      <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                        <span className=\"text-warning mr-2\">\r\n                          <ArrowDownwardIcon /> 3.48%\r\n                        </span>{\" \"}\r\n                        Sejak bulan lepas\r\n                      </Typography>\r\n                    </div>\r\n                  </div> */}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item lg={3} xl={3}>\r\n              <Card className=\"card card-lift--hover\">\r\n                <CardContent className=\"card-body\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-9\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                          <Typography variant=\"h6\">Lulus</Typography>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                        <Typography variant=\"h4\">{lulusCount}</Typography>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-3 text-right\">\r\n                      <div className=\"icon bg-green text-white rounded-circle shadow\">\r\n                        <DoneAllIcon />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {/* <div className=\"row mt-3\">\r\n                    <div className=\"col-12\">\r\n                      <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                        <span className=\"text-warning mr-2\">\r\n                        <ArrowDownwardIcon /> 1.10%\r\n                        </span>{\" \"}\r\n                        Sejak semalam\r\n                      </Typography>\r\n                    </div>\r\n                  </div> */}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item lg={3} xl={3}>\r\n              <Card className=\"card card-lift--hover\">\r\n                <CardContent className=\"card-body\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-9\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                          <Typography variant=\"h6\">Ditolak</Typography>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                        <Typography variant=\"h4\">{tolakCount}</Typography>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-3 text-right\">\r\n                      <div className=\"icon bg-red text-white rounded-circle shadow\">\r\n                        <ThumbDownOffAltIcon />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {/* <div className=\"row mt-3\">\r\n                    <div className=\"col-12\">\r\n                      <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                        <span className=\"text-success mr-2\">\r\n                          <ArrowUpwardIcon /> 12%\r\n                        </span>{\" \"}\r\n                        Sejak bulan lepas\r\n                      </Typography>\r\n                    </div>\r\n                  </div> */}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnalyticDashboard;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\KhairatFormPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\WangFormPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\WangNextPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\EvaluationPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\forms\\PerantiFormPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\ApplicationListPage.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\functions\\DragDrop.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\student\\ApplicationStatus.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\student\\HistoryFoodApplication.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\vendor\\CreateVendor.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\authentication\\RegisterDialog.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\vendor\\VendorList.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\StepperComponent.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\PerantiList.js",["286","287"],[],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { saveAs } from 'file-saver';\r\nimport DownloadRoundedIcon from '@mui/icons-material/DownloadRounded';\r\nimport Paper from '@mui/material/Paper';\r\nimport RuleRoundedIcon from '@mui/icons-material/RuleRounded';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport RemoveRedEyeRoundedIcon from '@mui/icons-material/RemoveRedEyeRounded';\r\nimport CheckCircleRounded from \"@mui/icons-material/CheckCircleRounded\";\r\nimport {rows} from \"./Data.js\";\r\n\r\n\r\n// const downloadDataAsCSV = () => {\r\n//   // Create a header row with column names\r\n//   const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n//   // Create a CSV content string by combining the header and data\r\n//   const csvData = [header].concat(\r\n//     rows.map((row) =>\r\n//       `${row.requestor_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n//     )\r\n//   ).join('\\n');\r\n\r\n//   // Create a Blob with the CSV content\r\n//   const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n//   // Use a library like FileSaver.js or implement the saveAs function\r\n//   // to trigger the download. Here's how you can use FileSaver.js:\r\n//   saveAs(blob, 'data.csv');\r\n// };\r\n\r\nconst columns = [\r\n  {\r\n    field: \"request_id\",\r\n    headerName: \"No Rujukan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"requestor_name\",\r\n    headerName: \"Nama Pelajar\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_type\",\r\n    headerName: \"Jenis Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_date\",\r\n    headerName: \"Tarikh Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_status\",\r\n    headerName: \"Status\",\r\n    width: 200,\r\n    editable: false,\r\n    renderCell: (params) => {\r\n      const status = params.value;\r\n      let textColor = \"white\"; // You can change the text color as needed\r\n      let backgroundColor = \"\"; // You can change the background color as needed\r\n\r\n      switch (status) {\r\n        case \"baharu\":\r\n          textColor = \"#ff8f00\"\r\n          backgroundColor = \"#ffecb3\"\r\n          break;\r\n        case \"sah bhepa\":\r\n          textColor = \"#757575\"\r\n          backgroundColor = \"#eeeeee\"\r\n          break;\r\n        case \"syor bhepa\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"lulus\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"tolak\":\r\n          textColor = \"#e53935\"\r\n          backgroundColor = \"#ffcdd2\"\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const cellStyle = {\r\n        color: textColor,\r\n        padding : 2,\r\n        fontSize: 12,\r\n        fontWeight: \"bold\",\r\n        width: 90,\r\n      };\r\n\r\n      const paperStyle = {\r\n        backgroundColor: backgroundColor,\r\n        borderRadius: 25,\r\n      };\r\n\r\n      return (\r\n        <Paper\r\n          square={false}\r\n          elevation={0}\r\n          style={paperStyle}\r\n        >\r\n        <div style={cellStyle}>\r\n          {params.value}\r\n        </div>\r\n        </Paper>\r\n      );},\r\n  },\r\n  {\r\n    field: \"actions\",\r\n    headerName: \"Tindakan\",\r\n    width: 150,\r\n    sortable: false,\r\n    renderCell: (params) => (\r\n      <Button\r\n        style = {{\r\n          backgroundColor: \"#fafafa\", \r\n          color: \"black\", \r\n          fontWeight: \"bold\", \r\n          boxShadow: \"none\",\r\n          outlineColor: \"lightgrey\",\r\n          outlineStyle: \"solid\",\r\n          outlineWidth: \"1.5px\",\r\n          width: 150,\r\n          textTransform: \"none\",\r\n          padding: \"3px\",\r\n        }}\r\n        variant=\"contained\"\r\n        href=\"http://localhost:3000/EvaluationPage\"\r\n        onClick={() => handleButtonClick(params.row.request_id)}\r\n      >\r\n        <span style={{ marginRight: \"20px\" }}>{getStatusButtonText(params.row.request_status).icon}</span>\r\n          {getStatusButtonText(params.row.request_status).text}\r\n      </Button>\r\n    ),\r\n  },\r\n];\r\n\r\n  const getStatusButtonText = (status) => {\r\n    let buttonText = \"\";\r\n    let icon = null;\r\n  \r\n    switch (status) {\r\n      case \"sah bhepa\":\r\n        buttonText = \"Sahkan\";\r\n        icon = <CheckCircleRounded />;\r\n        break;\r\n      case \"baharu\":\r\n        buttonText = \"Semak\";\r\n        icon = <RuleRoundedIcon />;\r\n        break;\r\n      case \"syor bhepa\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      case \"tolak\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      default:\r\n        buttonText = \"Unknown\";\r\n        break;\r\n    }\r\n  \r\n    return { text: buttonText, icon: icon };\r\n  };\r\n  \r\n  const handleButtonClick = (rowId) => {\r\n  // Add your logic here to handle the button click for the row with the given ID\r\n  console.log(`Button clicked for row with ID: ${rowId}`);\r\n  };\r\n  \r\n   function NewApplication(){\r\n\r\n    const [requests, setRequests] = useState([]);\r\n    const [userDetailsMap, setUserDetailsMap] = useState({});\r\n  \r\n    \r\n  useEffect(() => {\r\n    // Fetch user details from the server\r\n    fetch(\"http://localhost:8000/user-details\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.userDetails) {\r\n          // Convert the array of user details into a map\r\n          const detailsMap = {};\r\n          data.userDetails.forEach((detail) => {\r\n            detailsMap[detail.unique_id] = detail;\r\n          });\r\n          setUserDetailsMap(detailsMap);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching user details:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const statusParam = \"complete\"; // Replace with the desired status parameter\r\n    const typeparam = \"peranti\"; \r\n    const apiUrl = `http://localhost:8000/request-type-status?request_status=${statusParam}&request_type=${typeparam}`;\r\n\r\n    // Fetch requests from the server\r\n    fetch(apiUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.request) {\r\n          // Update request objects with user names\r\n          const requestsWithUserNames = data.request.map((request) => {\r\n            request.request_date = request.request_date.split('T')[0];\r\n            const requestorDetails = userDetailsMap[request.requestor_id];\r\n            const adminDetails = userDetailsMap[request.admin_approver_id];\r\n            const bhepaDetails = userDetailsMap[request.bhepa_approver_id];\r\n            const tncDetails = userDetailsMap[request.tnc_approver_id];\r\n\r\n            return {\r\n              ...request,\r\n              requestor_name: requestorDetails ? requestorDetails.name : '-',\r\n              admin_name: adminDetails ? adminDetails.name : '-',\r\n              bhepa_name: bhepaDetails ? bhepaDetails.name : '-',\r\n              tnc_name: tncDetails ? tncDetails.name : '-',\r\n            };\r\n          });\r\n\r\n          setRequests(requestsWithUserNames);\r\n          console.log(requests)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching requests data:\", error);\r\n      });\r\n  }, [userDetailsMap]);\r\n  \r\n  // console.log(requests)\r\n  // const filteredRequest = requests.filter(request => request.request_status === \"baharu\");\r\n\r\n  const downloadDataAsCSV = () => {\r\n    // Create a header row with column names\r\n    const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n    // Create a CSV content string by combining the header and data\r\n    const csvData = [header].concat(\r\n      requests.map((row) =>\r\n        `${row.request_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n      )\r\n    ).join('\\n');\r\n\r\n    // Create a Blob with the CSV content\r\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n    // Use a library like FileSaver.js or implement the saveAs function\r\n    // to trigger the download. Here's how you can use FileSaver.js:\r\n    saveAs(blob, 'data.csv');\r\n  };\r\n\r\n  return (\r\n    \r\n      <Box sx={{ height: 400, width: \"100%\" }}>\r\n        <Box sx={{ flexGrow: 1,}}\r\n        margin={1}\r\n        align={\"right\"}\r\n        >\r\n         <Button variant=\"contained\" \r\n          style={{\r\n            color: \"#424242\",\r\n            textTransform: \"none\",\r\n            backgroundColor: \"#eeeeee\",\r\n            boxShadow: \"none\",\r\n          }\r\n          }\r\n           onClick={downloadDataAsCSV}>\r\n            Muat Turun\r\n            <DownloadRoundedIcon\r\n              sx={{ ml: 1 }}\r\n            />\r\n          </Button>\r\n          <Typography\r\n            variant=\"body2\"\r\n            color=\"text.secondary\"\r\n            fontStyle={\"italic\"}\r\n            fontSize={12}\r\n          >  format .CSV </Typography>\r\n        </Box>\r\n        <DataGrid\r\n          rows={requests}\r\n          columns={columns}\r\n          getRowId={(row) => row.request_id} // Assuming request_id is unique\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: {\r\n                pageSize: 5,\r\n              },\r\n            },\r\n          }}\r\n          pageSizeOptions={[5]}\r\n          checkboxSelection\r\n          disableRowSelectionOnClick\r\n        />\r\n      </Box>\r\n  );\r\n  }\r\n\r\n  export default NewApplication;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\MakananList.js",["288","289"],[],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { saveAs } from 'file-saver';\r\nimport DownloadRoundedIcon from '@mui/icons-material/DownloadRounded';\r\nimport Paper from '@mui/material/Paper';\r\nimport RuleRoundedIcon from '@mui/icons-material/RuleRounded';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport RemoveRedEyeRoundedIcon from '@mui/icons-material/RemoveRedEyeRounded';\r\nimport CheckCircleRounded from \"@mui/icons-material/CheckCircleRounded\";\r\nimport {rows} from \"./Data.js\";\r\n\r\n\r\n// const downloadDataAsCSV = () => {\r\n//   // Create a header row with column names\r\n//   const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n//   // Create a CSV content string by combining the header and data\r\n//   const csvData = [header].concat(\r\n//     rows.map((row) =>\r\n//       `${row.requestor_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n//     )\r\n//   ).join('\\n');\r\n\r\n//   // Create a Blob with the CSV content\r\n//   const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n//   // Use a library like FileSaver.js or implement the saveAs function\r\n//   // to trigger the download. Here's how you can use FileSaver.js:\r\n//   saveAs(blob, 'data.csv');\r\n// };\r\n\r\nconst columns = [\r\n  {\r\n    field: \"request_id\",\r\n    headerName: \"No Rujukan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"requestor_name\",\r\n    headerName: \"Nama Pelajar\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_type\",\r\n    headerName: \"Jenis Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_date\",\r\n    headerName: \"Tarikh Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_status\",\r\n    headerName: \"Status\",\r\n    width: 200,\r\n    editable: false,\r\n    renderCell: (params) => {\r\n      const status = params.value;\r\n      let textColor = \"white\"; // You can change the text color as needed\r\n      let backgroundColor = \"\"; // You can change the background color as needed\r\n\r\n      switch (status) {\r\n        case \"baharu\":\r\n          textColor = \"#ff8f00\"\r\n          backgroundColor = \"#ffecb3\"\r\n          break;\r\n        case \"sah bhepa\":\r\n          textColor = \"#757575\"\r\n          backgroundColor = \"#eeeeee\"\r\n          break;\r\n        case \"syor bhepa\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"lulus\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"tolak\":\r\n          textColor = \"#e53935\"\r\n          backgroundColor = \"#ffcdd2\"\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const cellStyle = {\r\n        color: textColor,\r\n        padding : 2,\r\n        fontSize: 12,\r\n        fontWeight: \"bold\",\r\n        width: 90,\r\n      };\r\n\r\n      const paperStyle = {\r\n        backgroundColor: backgroundColor,\r\n        borderRadius: 25,\r\n      };\r\n\r\n      return (\r\n        <Paper\r\n          square={false}\r\n          elevation={0}\r\n          style={paperStyle}\r\n        >\r\n        <div style={cellStyle}>\r\n          {params.value}\r\n        </div>\r\n        </Paper>\r\n      );},\r\n  },\r\n  {\r\n    field: \"actions\",\r\n    headerName: \"Tindakan\",\r\n    width: 150,\r\n    sortable: false,\r\n    renderCell: (params) => (\r\n      <Button\r\n        style = {{\r\n          backgroundColor: \"#fafafa\", \r\n          color: \"black\", \r\n          fontWeight: \"bold\", \r\n          boxShadow: \"none\",\r\n          outlineColor: \"lightgrey\",\r\n          outlineStyle: \"solid\",\r\n          outlineWidth: \"1.5px\",\r\n          width: 150,\r\n          textTransform: \"none\",\r\n          padding: \"3px\",\r\n        }}\r\n        variant=\"contained\"\r\n        href=\"http://localhost:3000/EvaluationPage\"\r\n        onClick={() => handleButtonClick(params.row.request_id)}\r\n      >\r\n        <span style={{ marginRight: \"20px\" }}>{getStatusButtonText(params.row.request_status).icon}</span>\r\n          {getStatusButtonText(params.row.request_status).text}\r\n      </Button>\r\n    ),\r\n  },\r\n];\r\n\r\n  const getStatusButtonText = (status) => {\r\n    let buttonText = \"\";\r\n    let icon = null;\r\n  \r\n    switch (status) {\r\n      case \"sah bhepa\":\r\n        buttonText = \"Sahkan\";\r\n        icon = <CheckCircleRounded />;\r\n        break;\r\n      case \"baharu\":\r\n        buttonText = \"Semak\";\r\n        icon = <RuleRoundedIcon />;\r\n        break;\r\n      case \"syor bhepa\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      case \"tolak\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      default:\r\n        buttonText = \"Unknown\";\r\n        break;\r\n    }\r\n  \r\n    return { text: buttonText, icon: icon };\r\n  };\r\n  \r\n  const handleButtonClick = (rowId) => {\r\n  // Add your logic here to handle the button click for the row with the given ID\r\n  console.log(`Button clicked for row with ID: ${rowId}`);\r\n  };\r\n  \r\n   function NewApplication(){\r\n\r\n    const [requests, setRequests] = useState([]);\r\n    const [userDetailsMap, setUserDetailsMap] = useState({});\r\n  \r\n    \r\n  useEffect(() => {\r\n    // Fetch user details from the server\r\n    fetch(\"http://localhost:8000/user-details\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.userDetails) {\r\n          // Convert the array of user details into a map\r\n          const detailsMap = {};\r\n          data.userDetails.forEach((detail) => {\r\n            detailsMap[detail.unique_id] = detail;\r\n          });\r\n          setUserDetailsMap(detailsMap);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching user details:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const statusParam = \"complete\"; // Replace with the desired status parameter\r\n    const typeparam = \"makanan\"; \r\n    const apiUrl = `http://localhost:8000/request-type-status?request_status=${statusParam}&request_type=${typeparam}`;\r\n\r\n    // Fetch requests from the server\r\n    fetch(apiUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.request) {\r\n          // Update request objects with user names\r\n          const requestsWithUserNames = data.request.map((request) => {\r\n            request.request_date = request.request_date.split('T')[0];\r\n            const requestorDetails = userDetailsMap[request.requestor_id];\r\n            const adminDetails = userDetailsMap[request.admin_approver_id];\r\n            const bhepaDetails = userDetailsMap[request.bhepa_approver_id];\r\n            const tncDetails = userDetailsMap[request.tnc_approver_id];\r\n\r\n            return {\r\n              ...request,\r\n              requestor_name: requestorDetails ? requestorDetails.name : '-',\r\n              admin_name: adminDetails ? adminDetails.name : '-',\r\n              bhepa_name: bhepaDetails ? bhepaDetails.name : '-',\r\n              tnc_name: tncDetails ? tncDetails.name : '-',\r\n            };\r\n          });\r\n\r\n          setRequests(requestsWithUserNames);\r\n          console.log(requests)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching requests data:\", error);\r\n      });\r\n  }, [userDetailsMap]);\r\n  \r\n  // console.log(requests)\r\n  // const filteredRequest = requests.filter(request => request.request_status === \"baharu\");\r\n\r\n  const downloadDataAsCSV = () => {\r\n    // Create a header row with column names\r\n    const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n    // Create a CSV content string by combining the header and data\r\n    const csvData = [header].concat(\r\n      requests.map((row) =>\r\n        `${row.request_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n      )\r\n    ).join('\\n');\r\n\r\n    // Create a Blob with the CSV content\r\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n    // Use a library like FileSaver.js or implement the saveAs function\r\n    // to trigger the download. Here's how you can use FileSaver.js:\r\n    saveAs(blob, 'data.csv');\r\n  };\r\n\r\n  return (\r\n    \r\n      <Box sx={{ height: 400, width: \"100%\" }}>\r\n        <Box sx={{ flexGrow: 1,}}\r\n        margin={1}\r\n        align={\"right\"}\r\n        >\r\n         <Button variant=\"contained\" \r\n          style={{\r\n            color: \"#424242\",\r\n            textTransform: \"none\",\r\n            backgroundColor: \"#eeeeee\",\r\n            boxShadow: \"none\",\r\n          }\r\n          }\r\n           onClick={downloadDataAsCSV}>\r\n            Muat Turun\r\n            <DownloadRoundedIcon\r\n              sx={{ ml: 1 }}\r\n            />\r\n          </Button>\r\n          <Typography\r\n            variant=\"body2\"\r\n            color=\"text.secondary\"\r\n            fontStyle={\"italic\"}\r\n            fontSize={12}\r\n          >  format .CSV </Typography>\r\n        </Box>\r\n        <DataGrid\r\n          rows={requests}\r\n          columns={columns}\r\n          getRowId={(row) => row.request_id} // Assuming request_id is unique\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: {\r\n                pageSize: 5,\r\n              },\r\n            },\r\n          }}\r\n          pageSizeOptions={[5]}\r\n          checkboxSelection\r\n          disableRowSelectionOnClick\r\n        />\r\n      </Box>\r\n  );\r\n  }\r\n\r\n  export default NewApplication;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\KewanganList.js",["290","291"],[],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { saveAs } from 'file-saver';\r\nimport DownloadRoundedIcon from '@mui/icons-material/DownloadRounded';\r\nimport Paper from '@mui/material/Paper';\r\nimport RuleRoundedIcon from '@mui/icons-material/RuleRounded';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport RemoveRedEyeRoundedIcon from '@mui/icons-material/RemoveRedEyeRounded';\r\nimport CheckCircleRounded from \"@mui/icons-material/CheckCircleRounded\";\r\nimport {rows} from \"./Data.js\";\r\n\r\n\r\n// const downloadDataAsCSV = () => {\r\n//   // Create a header row with column names\r\n//   const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n//   // Create a CSV content string by combining the header and data\r\n//   const csvData = [header].concat(\r\n//     rows.map((row) =>\r\n//       `${row.requestor_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n//     )\r\n//   ).join('\\n');\r\n\r\n//   // Create a Blob with the CSV content\r\n//   const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n//   // Use a library like FileSaver.js or implement the saveAs function\r\n//   // to trigger the download. Here's how you can use FileSaver.js:\r\n//   saveAs(blob, 'data.csv');\r\n// };\r\n\r\nconst columns = [\r\n  {\r\n    field: \"request_id\",\r\n    headerName: \"No Rujukan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"requestor_name\",\r\n    headerName: \"Nama Pelajar\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_type\",\r\n    headerName: \"Jenis Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_date\",\r\n    headerName: \"Tarikh Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_status\",\r\n    headerName: \"Status\",\r\n    width: 200,\r\n    editable: false,\r\n    renderCell: (params) => {\r\n      const status = params.value;\r\n      let textColor = \"white\"; // You can change the text color as needed\r\n      let backgroundColor = \"\"; // You can change the background color as needed\r\n\r\n      switch (status) {\r\n        case \"baharu\":\r\n          textColor = \"#ff8f00\"\r\n          backgroundColor = \"#ffecb3\"\r\n          break;\r\n        case \"sah bhepa\":\r\n          textColor = \"#757575\"\r\n          backgroundColor = \"#eeeeee\"\r\n          break;\r\n        case \"syor bhepa\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"lulus\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"tolak\":\r\n          textColor = \"#e53935\"\r\n          backgroundColor = \"#ffcdd2\"\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const cellStyle = {\r\n        color: textColor,\r\n        padding : 2,\r\n        fontSize: 12,\r\n        fontWeight: \"bold\",\r\n        width: 90,\r\n      };\r\n\r\n      const paperStyle = {\r\n        backgroundColor: backgroundColor,\r\n        borderRadius: 25,\r\n      };\r\n\r\n      return (\r\n        <Paper\r\n          square={false}\r\n          elevation={0}\r\n          style={paperStyle}\r\n        >\r\n        <div style={cellStyle}>\r\n          {params.value}\r\n        </div>\r\n        </Paper>\r\n      );},\r\n  },\r\n  {\r\n    field: \"actions\",\r\n    headerName: \"Tindakan\",\r\n    width: 150,\r\n    sortable: false,\r\n    renderCell: (params) => (\r\n      <Button\r\n        style = {{\r\n          backgroundColor: \"#fafafa\", \r\n          color: \"black\", \r\n          fontWeight: \"bold\", \r\n          boxShadow: \"none\",\r\n          outlineColor: \"lightgrey\",\r\n          outlineStyle: \"solid\",\r\n          outlineWidth: \"1.5px\",\r\n          width: 150,\r\n          textTransform: \"none\",\r\n          padding: \"3px\",\r\n        }}\r\n        variant=\"contained\"\r\n        href=\"http://localhost:3000/EvaluationPage\"\r\n        onClick={() => handleButtonClick(params.row.request_id)}\r\n      >\r\n        <span style={{ marginRight: \"20px\" }}>{getStatusButtonText(params.row.request_status).icon}</span>\r\n          {getStatusButtonText(params.row.request_status).text}\r\n      </Button>\r\n    ),\r\n  },\r\n];\r\n\r\n  const getStatusButtonText = (status) => {\r\n    let buttonText = \"\";\r\n    let icon = null;\r\n  \r\n    switch (status) {\r\n      case \"sah bhepa\":\r\n        buttonText = \"Sahkan\";\r\n        icon = <CheckCircleRounded />;\r\n        break;\r\n      case \"baharu\":\r\n        buttonText = \"Semak\";\r\n        icon = <RuleRoundedIcon />;\r\n        break;\r\n      case \"syor bhepa\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      case \"tolak\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      default:\r\n        buttonText = \"Unknown\";\r\n        break;\r\n    }\r\n  \r\n    return { text: buttonText, icon: icon };\r\n  };\r\n  \r\n  const handleButtonClick = (rowId) => {\r\n  // Add your logic here to handle the button click for the row with the given ID\r\n  console.log(`Button clicked for row with ID: ${rowId}`);\r\n  };\r\n  \r\n   function NewApplication(){\r\n\r\n    const [requests, setRequests] = useState([]);\r\n    const [userDetailsMap, setUserDetailsMap] = useState({});\r\n  \r\n    \r\n  useEffect(() => {\r\n    // Fetch user details from the server\r\n    fetch(\"http://localhost:8000/user-details\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.userDetails) {\r\n          // Convert the array of user details into a map\r\n          const detailsMap = {};\r\n          data.userDetails.forEach((detail) => {\r\n            detailsMap[detail.unique_id] = detail;\r\n          });\r\n          setUserDetailsMap(detailsMap);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching user details:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const statusParam = \"complete\"; // Replace with the desired status parameter\r\n    const typeparam = \"wang\"; \r\n    const apiUrl = `http://localhost:8000/request-type-status?request_status=${statusParam}&request_type=${typeparam}`;\r\n\r\n    // Fetch requests from the server\r\n    fetch(apiUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.request) {\r\n          // Update request objects with user names\r\n          const requestsWithUserNames = data.request.map((request) => {\r\n            request.request_date = request.request_date.split('T')[0];\r\n            const requestorDetails = userDetailsMap[request.requestor_id];\r\n            const adminDetails = userDetailsMap[request.admin_approver_id];\r\n            const bhepaDetails = userDetailsMap[request.bhepa_approver_id];\r\n            const tncDetails = userDetailsMap[request.tnc_approver_id];\r\n\r\n            return {\r\n              ...request,\r\n              requestor_name: requestorDetails ? requestorDetails.name : '-',\r\n              admin_name: adminDetails ? adminDetails.name : '-',\r\n              bhepa_name: bhepaDetails ? bhepaDetails.name : '-',\r\n              tnc_name: tncDetails ? tncDetails.name : '-',\r\n            };\r\n          });\r\n\r\n          setRequests(requestsWithUserNames);\r\n          console.log(requests)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching requests data:\", error);\r\n      });\r\n  }, [userDetailsMap]);\r\n  \r\n  // console.log(requests)\r\n  // const filteredRequest = requests.filter(request => request.request_status === \"baharu\");\r\n\r\n  const downloadDataAsCSV = () => {\r\n    // Create a header row with column names\r\n    const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n    // Create a CSV content string by combining the header and data\r\n    const csvData = [header].concat(\r\n      requests.map((row) =>\r\n        `${row.request_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n      )\r\n    ).join('\\n');\r\n\r\n    // Create a Blob with the CSV content\r\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n    // Use a library like FileSaver.js or implement the saveAs function\r\n    // to trigger the download. Here's how you can use FileSaver.js:\r\n    saveAs(blob, 'data.csv');\r\n  };\r\n\r\n  return (\r\n    \r\n      <Box sx={{ height: 400, width: \"100%\" }}>\r\n        <Box sx={{ flexGrow: 1,}}\r\n        margin={1}\r\n        align={\"right\"}\r\n        >\r\n         <Button variant=\"contained\" \r\n          style={{\r\n            color: \"#424242\",\r\n            textTransform: \"none\",\r\n            backgroundColor: \"#eeeeee\",\r\n            boxShadow: \"none\",\r\n          }\r\n          }\r\n           onClick={downloadDataAsCSV}>\r\n            Muat Turun\r\n            <DownloadRoundedIcon\r\n              sx={{ ml: 1 }}\r\n            />\r\n          </Button>\r\n          <Typography\r\n            variant=\"body2\"\r\n            color=\"text.secondary\"\r\n            fontStyle={\"italic\"}\r\n            fontSize={12}\r\n          >  format .CSV </Typography>\r\n        </Box>\r\n        <DataGrid\r\n          rows={requests}\r\n          columns={columns}\r\n          getRowId={(row) => row.request_id} // Assuming request_id is unique\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: {\r\n                pageSize: 5,\r\n              },\r\n            },\r\n          }}\r\n          pageSizeOptions={[5]}\r\n          checkboxSelection\r\n          disableRowSelectionOnClick\r\n        />\r\n      </Box>\r\n  );\r\n  }\r\n\r\n  export default NewApplication;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\NewApplication.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\PendingApplication.js",["292"],[],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { saveAs } from 'file-saver';\r\nimport DownloadRoundedIcon from '@mui/icons-material/DownloadRounded';\r\nimport Paper from '@mui/material/Paper';\r\nimport RuleRoundedIcon from '@mui/icons-material/RuleRounded';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport RemoveRedEyeRoundedIcon from '@mui/icons-material/RemoveRedEyeRounded';\r\nimport CheckCircleRounded from \"@mui/icons-material/CheckCircleRounded\";\r\nimport {rows} from \"./Data.js\";\r\n\r\n\r\n// const downloadDataAsCSV = () => {\r\n//   // Create a header row with column names\r\n//   const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n//   // Create a CSV content string by combining the header and data\r\n//   const csvData = [header].concat(\r\n//     rows.map((row) =>\r\n//       `${row.requestor_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n//     )\r\n//   ).join('\\n');\r\n\r\n//   // Create a Blob with the CSV content\r\n//   const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n//   // Use a library like FileSaver.js or implement the saveAs function\r\n//   // to trigger the download. Here's how you can use FileSaver.js:\r\n//   saveAs(blob, 'data.csv');\r\n// };\r\n\r\nconst columns = [\r\n  {\r\n    field: \"request_id\",\r\n    headerName: \"No Rujukan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"requestor_name\",\r\n    headerName: \"Nama Pelajar\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_type\",\r\n    headerName: \"Jenis Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_date\",\r\n    headerName: \"Tarikh Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_status\",\r\n    headerName: \"Status\",\r\n    width: 200,\r\n    editable: false,\r\n    renderCell: (params) => {\r\n      const status = params.value;\r\n      let textColor = \"white\"; // You can change the text color as needed\r\n      let backgroundColor = \"\"; // You can change the background color as needed\r\n\r\n      switch (status) {\r\n        case \"baharu\":\r\n          textColor = \"#ff8f00\"\r\n          backgroundColor = \"#ffecb3\"\r\n          break;\r\n        case \"sah bhepa\":\r\n          textColor = \"#757575\"\r\n          backgroundColor = \"#eeeeee\"\r\n          break;\r\n        case \"syor bhepa\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"lulus tnc\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"tolak\":\r\n          textColor = \"#e53935\"\r\n          backgroundColor = \"#ffcdd2\"\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const cellStyle = {\r\n        color: textColor,\r\n        padding : 2,\r\n        fontSize: 12,\r\n        fontWeight: \"bold\",\r\n        width: 90,\r\n      };\r\n\r\n      const paperStyle = {\r\n        backgroundColor: backgroundColor,\r\n        borderRadius: 25,\r\n      };\r\n\r\n      return (\r\n        <Paper\r\n          square={false}\r\n          elevation={0}\r\n          style={paperStyle}\r\n        >\r\n        <div style={cellStyle}>\r\n          {params.value}\r\n        </div>\r\n        </Paper>\r\n      );},\r\n  },\r\n  {\r\n    field: \"actions\",\r\n    headerName: \"Tindakan\",\r\n    width: 150,\r\n    sortable: false,\r\n    renderCell: (params) => (\r\n      <Button\r\n        style = {{\r\n          backgroundColor: \"#fafafa\", \r\n          color: \"black\", \r\n          fontWeight: \"bold\", \r\n          boxShadow: \"none\",\r\n          outlineColor: \"lightgrey\",\r\n          outlineStyle: \"solid\",\r\n          outlineWidth: \"1.5px\",\r\n          width: 150,\r\n          textTransform: \"none\",\r\n          padding: \"3px\",\r\n        }}\r\n        variant=\"contained\"\r\n        href=\"http://localhost:3000/EvaluationPage\"\r\n        onClick={() => handleButtonClick(params.row.request_id)}\r\n      >\r\n        <span style={{ marginRight: \"20px\" }}>{getStatusButtonText(params.row.request_status).icon}</span>\r\n          {getStatusButtonText(params.row.request_status).text}\r\n      </Button>\r\n    ),\r\n  },\r\n];\r\n\r\n  const getStatusButtonText = (status) => {\r\n    let buttonText = \"\";\r\n    let icon = null;\r\n  \r\n    switch (status) {\r\n      case \"sah bhepa\":\r\n        buttonText = \"Sahkan\";\r\n        icon = <CheckCircleRounded />;\r\n        break;\r\n      case \"baharu\":\r\n        buttonText = \"Semak\";\r\n        icon = <RuleRoundedIcon />;\r\n        break;\r\n      case \"syor bhepa\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      case \"tolak\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      default:\r\n        buttonText = \"Unknown\";\r\n        break;\r\n    }\r\n  \r\n    return { text: buttonText, icon: icon };\r\n  };\r\n  \r\n  const handleButtonClick = (rowId) => {\r\n  // Add your logic here to handle the button click for the row with the given ID\r\n  console.log(`Button clicked for row with ID: ${rowId}`);\r\n  };\r\n  \r\n   function NewApplication(){\r\n\r\n    const [requests, setRequests] = useState([]);\r\n    const [userDetailsMap, setUserDetailsMap] = useState({});\r\n  \r\n    \r\n  useEffect(() => {\r\n    // Fetch user details from the server\r\n    fetch(\"http://localhost:8000/user-details\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.userDetails) {\r\n          // Convert the array of user details into a map\r\n          const detailsMap = {};\r\n          data.userDetails.forEach((detail) => {\r\n            detailsMap[detail.unique_id] = detail;\r\n          });\r\n          setUserDetailsMap(detailsMap);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching user details:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const statusParam = \"sah bhepa\"; // Replace with the desired status parameter\r\n    const apiUrl = `http://localhost:8000/request-status?request_status=${statusParam}`;\r\n\r\n    // Fetch requests from the server\r\n    fetch(apiUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.request) {\r\n          // Update request objects with user names\r\n          const requestsWithUserNames = data.request.map((request) => {\r\n            request.request_date = request.request_date.split('T')[0];\r\n            const requestorDetails = userDetailsMap[request.requestor_id];\r\n            const adminDetails = userDetailsMap[request.admin_approver_id];\r\n            const bhepaDetails = userDetailsMap[request.bhepa_approver_id];\r\n            const tncDetails = userDetailsMap[request.tnc_approver_id];\r\n\r\n            return {\r\n              ...request,\r\n              requestor_name: requestorDetails ? requestorDetails.name : '-',\r\n              admin_name: adminDetails ? adminDetails.name : '-',\r\n              bhepa_name: bhepaDetails ? bhepaDetails.name : '-',\r\n              tnc_name: tncDetails ? tncDetails.name : '-',\r\n            };\r\n          });\r\n\r\n          setRequests(requestsWithUserNames);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching requests data:\", error);\r\n      });\r\n  }, [userDetailsMap]);\r\n  \r\n  // console.log(requests)\r\n  // const filteredRequest = requests.filter(request => request.request_status === \"baharu\");\r\n\r\n  const downloadDataAsCSV = () => {\r\n    // Create a header row with column names\r\n    const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n    // Create a CSV content string by combining the header and data\r\n    const csvData = [header].concat(\r\n      requests.map((row) =>\r\n        `${row.request_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n      )\r\n    ).join('\\n');\r\n\r\n    // Create a Blob with the CSV content\r\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n    // Use a library like FileSaver.js or implement the saveAs function\r\n    // to trigger the download. Here's how you can use FileSaver.js:\r\n    saveAs(blob, 'data.csv');\r\n  };\r\n\r\n  return (\r\n    \r\n      <Box sx={{ height: 400, width: \"100%\" }}>\r\n        <Box sx={{ flexGrow: 1,}}\r\n        margin={1}\r\n        align={\"right\"}\r\n        >\r\n         <Button variant=\"contained\" \r\n          style={{\r\n            color: \"#424242\",\r\n            textTransform: \"none\",\r\n            backgroundColor: \"#eeeeee\",\r\n            boxShadow: \"none\",\r\n          }\r\n          }\r\n           onClick={downloadDataAsCSV}>\r\n            Muat Turun\r\n            <DownloadRoundedIcon\r\n              sx={{ ml: 1 }}\r\n            />\r\n          </Button>\r\n          <Typography\r\n            variant=\"body2\"\r\n            color=\"text.secondary\"\r\n            fontStyle={\"italic\"}\r\n            fontSize={12}\r\n          >  format .CSV </Typography>\r\n        </Box>\r\n        <DataGrid\r\n          rows={requests}\r\n          columns={columns}\r\n          getRowId={(row) => row.request_id} // Assuming request_id is unique\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: {\r\n                pageSize: 5,\r\n              },\r\n            },\r\n          }}\r\n          pageSizeOptions={[5]}\r\n          checkboxSelection\r\n          disableRowSelectionOnClick\r\n        />\r\n      </Box>\r\n  );\r\n  }\r\n\r\n  export default NewApplication;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\KhairatKematianList.js",["293","294"],[],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { saveAs } from 'file-saver';\r\nimport DownloadRoundedIcon from '@mui/icons-material/DownloadRounded';\r\nimport Paper from '@mui/material/Paper';\r\nimport RuleRoundedIcon from '@mui/icons-material/RuleRounded';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport RemoveRedEyeRoundedIcon from '@mui/icons-material/RemoveRedEyeRounded';\r\nimport CheckCircleRounded from \"@mui/icons-material/CheckCircleRounded\";\r\nimport {rows} from \"./Data.js\";\r\n\r\n\r\n// const downloadDataAsCSV = () => {\r\n//   // Create a header row with column names\r\n//   const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n//   // Create a CSV content string by combining the header and data\r\n//   const csvData = [header].concat(\r\n//     rows.map((row) =>\r\n//       `${row.requestor_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n//     )\r\n//   ).join('\\n');\r\n\r\n//   // Create a Blob with the CSV content\r\n//   const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n//   // Use a library like FileSaver.js or implement the saveAs function\r\n//   // to trigger the download. Here's how you can use FileSaver.js:\r\n//   saveAs(blob, 'data.csv');\r\n// };\r\n\r\nconst columns = [\r\n  {\r\n    field: \"request_id\",\r\n    headerName: \"No Rujukan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"requestor_name\",\r\n    headerName: \"Nama Pelajar\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_type\",\r\n    headerName: \"Jenis Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_date\",\r\n    headerName: \"Tarikh Permohonan\",\r\n    width: 150,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"request_status\",\r\n    headerName: \"Status\",\r\n    width: 200,\r\n    editable: false,\r\n    renderCell: (params) => {\r\n      const status = params.value;\r\n      let textColor = \"white\"; // You can change the text color as needed\r\n      let backgroundColor = \"\"; // You can change the background color as needed\r\n\r\n      switch (status) {\r\n        case \"baharu\":\r\n          textColor = \"#ff8f00\"\r\n          backgroundColor = \"#ffecb3\"\r\n          break;\r\n        case \"sah bhepa\":\r\n          textColor = \"#757575\"\r\n          backgroundColor = \"#eeeeee\"\r\n          break;\r\n        case \"syor bhepa\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"lulus\":\r\n          textColor = \"#558b2f\"\r\n          backgroundColor = \"#dcedc8\"\r\n          break;\r\n        case \"tolak\":\r\n          textColor = \"#e53935\"\r\n          backgroundColor = \"#ffcdd2\"\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const cellStyle = {\r\n        color: textColor,\r\n        padding : 2,\r\n        fontSize: 12,\r\n        fontWeight: \"bold\",\r\n        width: 90,\r\n      };\r\n\r\n      const paperStyle = {\r\n        backgroundColor: backgroundColor,\r\n        borderRadius: 25,\r\n      };\r\n\r\n      return (\r\n        <Paper\r\n          square={false}\r\n          elevation={0}\r\n          style={paperStyle}\r\n        >\r\n        <div style={cellStyle}>\r\n          {params.value}\r\n        </div>\r\n        </Paper>\r\n      );},\r\n  },\r\n  {\r\n    field: \"actions\",\r\n    headerName: \"Tindakan\",\r\n    width: 150,\r\n    sortable: false,\r\n    renderCell: (params) => (\r\n      <Button\r\n        style = {{\r\n          backgroundColor: \"#fafafa\", \r\n          color: \"black\", \r\n          fontWeight: \"bold\", \r\n          boxShadow: \"none\",\r\n          outlineColor: \"lightgrey\",\r\n          outlineStyle: \"solid\",\r\n          outlineWidth: \"1.5px\",\r\n          width: 150,\r\n          textTransform: \"none\",\r\n          padding: \"3px\",\r\n        }}\r\n        variant=\"contained\"\r\n        href=\"http://localhost:3000/EvaluationPage\"\r\n        onClick={() => handleButtonClick(params.row.request_id)}\r\n      >\r\n        <span style={{ marginRight: \"20px\" }}>{getStatusButtonText(params.row.request_status).icon}</span>\r\n          {getStatusButtonText(params.row.request_status).text}\r\n      </Button>\r\n    ),\r\n  },\r\n];\r\n\r\n  const getStatusButtonText = (status) => {\r\n    let buttonText = \"\";\r\n    let icon = null;\r\n  \r\n    switch (status) {\r\n      case \"sah bhepa\":\r\n        buttonText = \"Sahkan\";\r\n        icon = <CheckCircleRounded />;\r\n        break;\r\n      case \"baharu\":\r\n        buttonText = \"Semak\";\r\n        icon = <RuleRoundedIcon />;\r\n        break;\r\n      case \"syor bhepa\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      case \"tolak\":\r\n        buttonText = \"Lihat\";\r\n        icon = <RemoveRedEyeRoundedIcon />;\r\n        break;\r\n      default:\r\n        buttonText = \"Unknown\";\r\n        break;\r\n    }\r\n  \r\n    return { text: buttonText, icon: icon };\r\n  };\r\n  \r\n  const handleButtonClick = (rowId) => {\r\n  // Add your logic here to handle the button click for the row with the given ID\r\n  console.log(`Button clicked for row with ID: ${rowId}`);\r\n  };\r\n  \r\n   function NewApplication(){\r\n\r\n    const [requests, setRequests] = useState([]);\r\n    const [userDetailsMap, setUserDetailsMap] = useState({});\r\n  \r\n    \r\n  useEffect(() => {\r\n    // Fetch user details from the server\r\n    fetch(\"http://localhost:8000/user-details\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.userDetails) {\r\n          // Convert the array of user details into a map\r\n          const detailsMap = {};\r\n          data.userDetails.forEach((detail) => {\r\n            detailsMap[detail.unique_id] = detail;\r\n          });\r\n          setUserDetailsMap(detailsMap);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching user details:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const statusParam = \"complete\"; // Replace with the desired status parameter\r\n    const typeparam = \"khairat\"; \r\n    const apiUrl = `http://localhost:8000/request-type-status?request_status=${statusParam}&request_type=${typeparam}`;\r\n\r\n    // Fetch requests from the server\r\n    fetch(apiUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.request) {\r\n          // Update request objects with user names\r\n          const requestsWithUserNames = data.request.map((request) => {\r\n            request.request_date = request.request_date.split('T')[0];\r\n            const requestorDetails = userDetailsMap[request.requestor_id];\r\n            const adminDetails = userDetailsMap[request.admin_approver_id];\r\n            const bhepaDetails = userDetailsMap[request.bhepa_approver_id];\r\n            const tncDetails = userDetailsMap[request.tnc_approver_id];\r\n\r\n            return {\r\n              ...request,\r\n              requestor_name: requestorDetails ? requestorDetails.name : '-',\r\n              admin_name: adminDetails ? adminDetails.name : '-',\r\n              bhepa_name: bhepaDetails ? bhepaDetails.name : '-',\r\n              tnc_name: tncDetails ? tncDetails.name : '-',\r\n            };\r\n          });\r\n\r\n          setRequests(requestsWithUserNames);\r\n          console.log(requests)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching requests data:\", error);\r\n      });\r\n  }, [userDetailsMap]);\r\n  \r\n  // console.log(requests)\r\n  // const filteredRequest = requests.filter(request => request.request_status === \"baharu\");\r\n\r\n  const downloadDataAsCSV = () => {\r\n    // Create a header row with column names\r\n    const header = 'No Rujukan,Nama Pelajar,Jenis Permohonan,Tarikh Permohonan,Status,Nama penyemak admin, Nama pengesyor bhepa, Nama pelulus TNC';\r\n\r\n    // Create a CSV content string by combining the header and data\r\n    const csvData = [header].concat(\r\n      requests.map((row) =>\r\n        `${row.request_id},${row.requestor_name},${row.request_type},${row.request_date},${row.request_status},${row.admin_approver_id},${row.bhepa_approver_id},${row.tnc_approver_id}`\r\n      )\r\n    ).join('\\n');\r\n\r\n    // Create a Blob with the CSV content\r\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });\r\n\r\n    // Use a library like FileSaver.js or implement the saveAs function\r\n    // to trigger the download. Here's how you can use FileSaver.js:\r\n    saveAs(blob, 'data.csv');\r\n  };\r\n\r\n  return (\r\n    \r\n      <Box sx={{ height: 400, width: \"100%\" }}>\r\n        <Box sx={{ flexGrow: 1,}}\r\n        margin={1}\r\n        align={\"right\"}\r\n        >\r\n         <Button variant=\"contained\" \r\n          style={{\r\n            color: \"#424242\",\r\n            textTransform: \"none\",\r\n            backgroundColor: \"#eeeeee\",\r\n            boxShadow: \"none\",\r\n          }\r\n          }\r\n           onClick={downloadDataAsCSV}>\r\n            Muat Turun\r\n            <DownloadRoundedIcon\r\n              sx={{ ml: 1 }}\r\n            />\r\n          </Button>\r\n          <Typography\r\n            variant=\"body2\"\r\n            color=\"text.secondary\"\r\n            fontStyle={\"italic\"}\r\n            fontSize={12}\r\n          >  format .CSV </Typography>\r\n        </Box>\r\n        <DataGrid\r\n          rows={requests}\r\n          columns={columns}\r\n          getRowId={(row) => row.request_id} // Assuming request_id is unique\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: {\r\n                pageSize: 5,\r\n              },\r\n            },\r\n          }}\r\n          pageSizeOptions={[5]}\r\n          checkboxSelection\r\n          disableRowSelectionOnClick\r\n        />\r\n      </Box>\r\n  );\r\n  }\r\n\r\n  export default NewApplication;\r\n","C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\student\\DescriptionDialog.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\vendor\\InvoiceDialog.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\StudentInfoStep.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\ResultStep.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\ApprovedDialog.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\DocumentationStep.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\evaluation\\subcomponent\\RejectDialog.js",[],[],"C:\\Users\\Jeremy\\siswa-usm\\test_db_client\\src\\component\\admin\\application\\tables\\Data.js",[],[],{"ruleId":"295","severity":1,"message":"296","line":50,"column":7,"nodeType":"297","messageId":"298","endLine":50,"endColumn":16},{"ruleId":"299","severity":1,"message":"300","line":88,"column":13,"nodeType":"301","endLine":88,"endColumn":41},{"ruleId":"295","severity":1,"message":"302","line":6,"column":10,"nodeType":"297","messageId":"298","endLine":6,"endColumn":20},{"ruleId":"295","severity":1,"message":"303","line":6,"column":22,"nodeType":"297","messageId":"298","endLine":6,"endColumn":35},{"ruleId":"304","severity":1,"message":"305","line":84,"column":4,"nodeType":"306","endLine":84,"endColumn":6,"suggestions":"307"},{"ruleId":"295","severity":1,"message":"308","line":12,"column":20,"nodeType":"297","messageId":"298","endLine":12,"endColumn":31},{"ruleId":"295","severity":1,"message":"309","line":71,"column":9,"nodeType":"297","messageId":"298","endLine":71,"endColumn":20},{"ruleId":"295","severity":1,"message":"308","line":11,"column":20,"nodeType":"297","messageId":"298","endLine":11,"endColumn":31},{"ruleId":"295","severity":1,"message":"310","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":36},{"ruleId":"295","severity":1,"message":"311","line":15,"column":8,"nodeType":"297","messageId":"298","endLine":15,"endColumn":23},{"ruleId":"295","severity":1,"message":"312","line":16,"column":8,"nodeType":"297","messageId":"298","endLine":16,"endColumn":25},{"ruleId":"295","severity":1,"message":"313","line":12,"column":9,"nodeType":"297","messageId":"298","endLine":12,"endColumn":13},{"ruleId":"304","severity":1,"message":"314","line":242,"column":6,"nodeType":"306","endLine":242,"endColumn":22,"suggestions":"315"},{"ruleId":"295","severity":1,"message":"313","line":12,"column":9,"nodeType":"297","messageId":"298","endLine":12,"endColumn":13},{"ruleId":"304","severity":1,"message":"314","line":242,"column":6,"nodeType":"306","endLine":242,"endColumn":22,"suggestions":"316"},{"ruleId":"295","severity":1,"message":"313","line":12,"column":9,"nodeType":"297","messageId":"298","endLine":12,"endColumn":13},{"ruleId":"304","severity":1,"message":"314","line":242,"column":6,"nodeType":"306","endLine":242,"endColumn":22,"suggestions":"317"},{"ruleId":"295","severity":1,"message":"313","line":12,"column":9,"nodeType":"297","messageId":"298","endLine":12,"endColumn":13},{"ruleId":"295","severity":1,"message":"313","line":12,"column":9,"nodeType":"297","messageId":"298","endLine":12,"endColumn":13},{"ruleId":"304","severity":1,"message":"314","line":242,"column":6,"nodeType":"306","endLine":242,"endColumn":22,"suggestions":"318"},"no-unused-vars","'analytics' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'dataCounts' is assigned a value but never used.","'setDataCounts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["319"],"'setFormData' is assigned a value but never used.","'buttonStyle' is assigned a value but never used.","'useEffect' is defined but never used.","'ArrowUpwardIcon' is defined but never used.","'ArrowDownwardIcon' is defined but never used.","'rows' is defined but never used.","React Hook useEffect has a missing dependency: 'requests'. Either include it or remove the dependency array.",["320"],["321"],["322"],["323"],{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"326","fix":"328"},{"desc":"326","fix":"329"},{"desc":"326","fix":"330"},"Update the dependencies array to be: [data]",{"range":"331","text":"332"},"Update the dependencies array to be: [requests, userDetailsMap]",{"range":"333","text":"334"},{"range":"335","text":"334"},{"range":"336","text":"334"},{"range":"337","text":"334"},[2722,2724],"[data]",[7471,7487],"[requests, userDetailsMap]",[7471,7487],[7468,7484],[7471,7487]]